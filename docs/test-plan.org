#+TITLE: Test Plan Document
#+AUTHOR: Peter Jackson Link, III
* IDENTIFICATION INFORMATION
** Product
 - *PRODUCT NAME:* Charito
** Product Description
An advanced bible study application utilizing time-tested web technologies and
a plethora of public-domain resources.
** Testing Objectives
The tests should ensure stability of API between the internal modules of the
application, ensure modules interoperate properly for key tasks, check for
robustness of endpoints, and confirm the interface conforms to user expectations.
** Features to be Tested
The exported functions of the web chassis, scripture reference database, thml
processor, and bible fetcher; the overall document loading process; defined
route handlers; and the bible view/resource view user interfaces.
** Features Not to be Tested
Non-exported functions (i.e. internal implementation guts).
* INTEGRATION TEST
** Integration Test Strategy and Extent of Integration Testing
Only test exported functions from the modules. Tests shall be conducted on the
latest OpenBSD snapshot with the latest version of SBCL and a fresh install of
AP5.
** Integration Test Cases
|  # | Objective                 | Input                                    | Expected Results                                                                          |
|----+---------------------------+------------------------------------------+-------------------------------------------------------------------------------------------|
|  1 | Add Scripture Reference   | #P"testfile" -> Gen 1:1                  | The references in mhcc.xml should be reflected in the database.                           |
|  2 | Fetch Scripture Reference | Gen 1:1-3                                | Should show the mhcc reference that matches that entry exactly.                           |
|  3 | Fetch Reference by Verse  | Rom 3:23                                 | Should show any reference that has that verse within its span.                            |
|  4 | Define a Route            | "/hello" -> "Hello, World!"              | Shows the framework is defining routes properly.                                          |
|  5 | Make a Temporary Route    | (lambda (&rest _) (ignore _) "It works") | It should return the address of the continuation, and the route must only be usable once. |
|  6 | Redirect                  | "/"                                      | Should return an HTTP redirect to the address "/".                                        |
|  7 | Load Normal Documents     | None                                     | The function should load all the normal documents into the database.                      |
|  8 | Render File               | Compiled [[https://ccel.org/ccel/h/henry/mhcc.xml][mhcc.xml]]                        | Should render the compiled file into HTML.                                                |
|  9 | Get Bible Fetcher         | :KJV                                     | It should fetch a Bible renderer.                                                         |
| 10 | Bible Fetcher Renders     | :KJV Gen 1                               | The Bible renderer should render Genesis chapter 1 to HTML.                               |
| 11 | Start Server              | None                                     | No errors should occur.                                                                   |
| 12 | Fuzz Routes               | RNG for fuzzer                           | The routes should robustly handle bad data without crashing the server.                   |
* USER-ACCEPTANCE TEST
** User-Acceptance Test Strategy
The user interface must be usable by students, pastors, professors, and
laypeople. Surveys shall be given to all participants asking about the
usefulness and usability of the interface.
** User-Acceptance Test Cases
|  # | Objective                | Input                       | Expected Results                                                                                                 |
|----+--------------------------+-----------------------------+------------------------------------------------------------------------------------------------------------------|
|  1 | Selection of Translation | Button on Home Screen       | The user should find it trivial to select a translation of the Bible that meets expectations.                    |
|  2 | Word Search              | User Text in Search Bar     | The user should easily find information they feel is relevant.                                                   |
|  3 | Language Dropdown        | Button in Bible View        | The user should be able to expand a verse into a list which includes the original language text.                 |
|  4 | Reference Dropdown       | Button in Bible View        | The user should be able to expand a verse into a list which includes the historical documents that reference it. |
|  5 | Hyperlinked References   | Links in Reference View     | The user should be able to navigate to a referenced passage of scripture from the reference view.                |
|  6 | Manuscript Comparison    | Button in Language Dropdown | The user should be able to compare manuscripts to a degree suitable for amateur text-critical work.              |
|  7 | Login Screen             | Button on Top Bar           | The user should be able to register or log in to an account trivially.                                           |
|  8 | Notes                    | Button in Bible View        | The user should be able to easily record notes.                                                                  |
|  9 | Vocab List               | Button in Bible View        | The user should be able to create a vocabulary list from an original language manuscript of the current chapter. |
| 10 | Flashcard Generation     | Button in Bible View        | The user should be able to create and view flashcards for the vocabulary list of the current chapter.            |
| 11 | User Theme Settings      | Form in User Options        | The user should be able to adjust the font and colors of the site to aid in reading.                             |
* Test Deliverables
 - Test Plan
 - Automated Tests in Project
 - Survey Responses
* Schedule
 - Automated Tests Complete: Jan 30th
 - Survey Responses Open: Feb 1st
 - Survey Responses Closed: Feb 27th
* Risks
N/A
* Appendix
https://www.youtube.com/watch?v=HM1Zb3xmvMc
